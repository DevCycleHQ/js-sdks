/* eslint-disable */
// @generated by protobuf-ts 2.9.6 with parameter eslint_disable,output_javascript,output_legacy_commonjs,use_proto_field_name
// @generated from protobuf file "variableForUserParams.proto" (syntax proto3)
// tslint:disable
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKVariable_PB = exports.DVCUser_PB = exports.VariableForUserParams_PB = exports.NullableCustomData = exports.CustomDataValue = exports.NullableDouble = exports.NullableString = exports.CustomDataType = exports.VariableType_PB = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * @generated from protobuf enum VariableType_PB
 */
var VariableType_PB;
(function (VariableType_PB) {
    /**
     * @generated from protobuf enum value: Boolean = 0;
     */
    VariableType_PB[VariableType_PB["Boolean"] = 0] = "Boolean";
    /**
     * @generated from protobuf enum value: Number = 1;
     */
    VariableType_PB[VariableType_PB["Number"] = 1] = "Number";
    /**
     * @generated from protobuf enum value: String = 2;
     */
    VariableType_PB[VariableType_PB["String"] = 2] = "String";
    /**
     * @generated from protobuf enum value: JSON = 3;
     */
    VariableType_PB[VariableType_PB["JSON"] = 3] = "JSON";
})(VariableType_PB = exports.VariableType_PB || (exports.VariableType_PB = {}));
/**
 * @generated from protobuf enum CustomDataType
 */
var CustomDataType;
(function (CustomDataType) {
    /**
     * @generated from protobuf enum value: Bool = 0;
     */
    CustomDataType[CustomDataType["Bool"] = 0] = "Bool";
    /**
     * @generated from protobuf enum value: Num = 1;
     */
    CustomDataType[CustomDataType["Num"] = 1] = "Num";
    /**
     * @generated from protobuf enum value: Str = 2;
     */
    CustomDataType[CustomDataType["Str"] = 2] = "Str";
    /**
     * @generated from protobuf enum value: Null = 3;
     */
    CustomDataType[CustomDataType["Null"] = 3] = "Null";
})(CustomDataType = exports.CustomDataType || (exports.CustomDataType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class NullableString$Type extends runtime_4.MessageType {
    constructor() {
        super("NullableString", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "isNull", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = "";
        message.isNull = false;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                case /* bool isNull */ 2:
                    message.isNull = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.value);
        /* bool isNull = 2; */
        if (message.isNull !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNull);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NullableString
 */
exports.NullableString = new NullableString$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullableDouble$Type extends runtime_4.MessageType {
    constructor() {
        super("NullableDouble", [
            { no: 1, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "isNull", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = 0;
        message.isNull = false;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double value */ 1:
                    message.value = reader.double();
                    break;
                case /* bool isNull */ 2:
                    message.isNull = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double value = 1; */
        if (message.value !== 0)
            writer.tag(1, runtime_1.WireType.Bit64).double(message.value);
        /* bool isNull = 2; */
        if (message.isNull !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNull);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NullableDouble
 */
exports.NullableDouble = new NullableDouble$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomDataValue$Type extends runtime_4.MessageType {
    constructor() {
        super("CustomDataValue", [
            { no: 1, name: "type", kind: "enum", T: () => ["CustomDataType", CustomDataType] },
            { no: 2, name: "boolValue", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "doubleValue", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "stringValue", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* CustomDataType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional bool boolValue */ 2:
                    message.boolValue = reader.bool();
                    break;
                case /* optional double doubleValue */ 3:
                    message.doubleValue = reader.double();
                    break;
                case /* optional string stringValue */ 4:
                    message.stringValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* CustomDataType type = 1; */
        if (message.type !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.type);
        /* optional bool boolValue = 2; */
        if (message.boolValue !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.boolValue);
        /* optional double doubleValue = 3; */
        if (message.doubleValue !== undefined)
            writer.tag(3, runtime_1.WireType.Bit64).double(message.doubleValue);
        /* optional string stringValue = 4; */
        if (message.stringValue !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.stringValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomDataValue
 */
exports.CustomDataValue = new CustomDataValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NullableCustomData$Type extends runtime_4.MessageType {
    constructor() {
        super("NullableCustomData", [
            { no: 1, name: "value", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => exports.CustomDataValue } },
            { no: 2, name: "isNull", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.value = {};
        message.isNull = false;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, CustomDataValue> value */ 1:
                    this.binaryReadMap1(message.value, reader, options);
                    break;
                case /* bool isNull */ 2:
                    message.isNull = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = exports.CustomDataValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field NullableCustomData.value");
            }
        }
        map[key ?? ""] = val ?? exports.CustomDataValue.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<string, CustomDataValue> value = 1; */
        for (let k of globalThis.Object.keys(message.value)) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k);
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.CustomDataValue.internalBinaryWrite(message.value[k], writer, options);
            writer.join().join();
        }
        /* bool isNull = 2; */
        if (message.isNull !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNull);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NullableCustomData
 */
exports.NullableCustomData = new NullableCustomData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VariableForUserParams_PB$Type extends runtime_4.MessageType {
    constructor() {
        super("VariableForUserParams_PB", [
            { no: 1, name: "sdkKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "variableKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "variableType", kind: "enum", T: () => ["VariableType_PB", VariableType_PB] },
            { no: 4, name: "user", kind: "message", T: () => exports.DVCUser_PB },
            { no: 5, name: "shouldTrackEvent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sdkKey = "";
        message.variableKey = "";
        message.variableType = 0;
        message.shouldTrackEvent = false;
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sdkKey */ 1:
                    message.sdkKey = reader.string();
                    break;
                case /* string variableKey */ 2:
                    message.variableKey = reader.string();
                    break;
                case /* VariableType_PB variableType */ 3:
                    message.variableType = reader.int32();
                    break;
                case /* DVCUser_PB user */ 4:
                    message.user = exports.DVCUser_PB.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* bool shouldTrackEvent */ 5:
                    message.shouldTrackEvent = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sdkKey = 1; */
        if (message.sdkKey !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.sdkKey);
        /* string variableKey = 2; */
        if (message.variableKey !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.variableKey);
        /* VariableType_PB variableType = 3; */
        if (message.variableType !== 0)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.variableType);
        /* DVCUser_PB user = 4; */
        if (message.user)
            exports.DVCUser_PB.internalBinaryWrite(message.user, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* bool shouldTrackEvent = 5; */
        if (message.shouldTrackEvent !== false)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.shouldTrackEvent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VariableForUserParams_PB
 */
exports.VariableForUserParams_PB = new VariableForUserParams_PB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVCUser_PB$Type extends runtime_4.MessageType {
    constructor() {
        super("DVCUser_PB", [
            { no: 1, name: "user_id", kind: "scalar", localName: "user_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "message", T: () => exports.NullableString },
            { no: 3, name: "name", kind: "message", T: () => exports.NullableString },
            { no: 4, name: "language", kind: "message", T: () => exports.NullableString },
            { no: 5, name: "country", kind: "message", T: () => exports.NullableString },
            { no: 6, name: "appBuild", kind: "message", T: () => exports.NullableDouble },
            { no: 7, name: "appVersion", kind: "message", T: () => exports.NullableString },
            { no: 8, name: "deviceModel", kind: "message", T: () => exports.NullableString },
            { no: 9, name: "customData", kind: "message", T: () => exports.NullableCustomData },
            { no: 10, name: "privateCustomData", kind: "message", T: () => exports.NullableCustomData }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.user_id = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.user_id = reader.string();
                    break;
                case /* NullableString email */ 2:
                    message.email = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.email);
                    break;
                case /* NullableString name */ 3:
                    message.name = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.name);
                    break;
                case /* NullableString language */ 4:
                    message.language = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.language);
                    break;
                case /* NullableString country */ 5:
                    message.country = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.country);
                    break;
                case /* NullableDouble appBuild */ 6:
                    message.appBuild = exports.NullableDouble.internalBinaryRead(reader, reader.uint32(), options, message.appBuild);
                    break;
                case /* NullableString appVersion */ 7:
                    message.appVersion = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.appVersion);
                    break;
                case /* NullableString deviceModel */ 8:
                    message.deviceModel = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.deviceModel);
                    break;
                case /* NullableCustomData customData */ 9:
                    message.customData = exports.NullableCustomData.internalBinaryRead(reader, reader.uint32(), options, message.customData);
                    break;
                case /* NullableCustomData privateCustomData */ 10:
                    message.privateCustomData = exports.NullableCustomData.internalBinaryRead(reader, reader.uint32(), options, message.privateCustomData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string user_id = 1; */
        if (message.user_id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.user_id);
        /* NullableString email = 2; */
        if (message.email)
            exports.NullableString.internalBinaryWrite(message.email, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableString name = 3; */
        if (message.name)
            exports.NullableString.internalBinaryWrite(message.name, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableString language = 4; */
        if (message.language)
            exports.NullableString.internalBinaryWrite(message.language, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableString country = 5; */
        if (message.country)
            exports.NullableString.internalBinaryWrite(message.country, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableDouble appBuild = 6; */
        if (message.appBuild)
            exports.NullableDouble.internalBinaryWrite(message.appBuild, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableString appVersion = 7; */
        if (message.appVersion)
            exports.NullableString.internalBinaryWrite(message.appVersion, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableString deviceModel = 8; */
        if (message.deviceModel)
            exports.NullableString.internalBinaryWrite(message.deviceModel, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableCustomData customData = 9; */
        if (message.customData)
            exports.NullableCustomData.internalBinaryWrite(message.customData, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* NullableCustomData privateCustomData = 10; */
        if (message.privateCustomData)
            exports.NullableCustomData.internalBinaryWrite(message.privateCustomData, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DVCUser_PB
 */
exports.DVCUser_PB = new DVCUser_PB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SDKVariable_PB$Type extends runtime_4.MessageType {
    constructor() {
        super("SDKVariable_PB", [
            { no: 1, name: "_id", kind: "scalar", localName: "_id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["VariableType_PB", VariableType_PB] },
            { no: 3, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "boolValue", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "doubleValue", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "stringValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "evalReason", kind: "message", T: () => exports.NullableString }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message._id = "";
        message.type = 0;
        message.key = "";
        message.boolValue = false;
        message.doubleValue = 0;
        message.stringValue = "";
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string _id */ 1:
                    message._id = reader.string();
                    break;
                case /* VariableType_PB type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string key */ 3:
                    message.key = reader.string();
                    break;
                case /* bool boolValue */ 4:
                    message.boolValue = reader.bool();
                    break;
                case /* double doubleValue */ 5:
                    message.doubleValue = reader.double();
                    break;
                case /* string stringValue */ 6:
                    message.stringValue = reader.string();
                    break;
                case /* NullableString evalReason */ 7:
                    message.evalReason = exports.NullableString.internalBinaryRead(reader, reader.uint32(), options, message.evalReason);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string _id = 1; */
        if (message._id !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message._id);
        /* VariableType_PB type = 2; */
        if (message.type !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.type);
        /* string key = 3; */
        if (message.key !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.key);
        /* bool boolValue = 4; */
        if (message.boolValue !== false)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.boolValue);
        /* double doubleValue = 5; */
        if (message.doubleValue !== 0)
            writer.tag(5, runtime_1.WireType.Bit64).double(message.doubleValue);
        /* string stringValue = 6; */
        if (message.stringValue !== "")
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.stringValue);
        /* NullableString evalReason = 7; */
        if (message.evalReason)
            exports.NullableString.internalBinaryWrite(message.evalReason, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SDKVariable_PB
 */
exports.SDKVariable_PB = new SDKVariable_PB$Type();
