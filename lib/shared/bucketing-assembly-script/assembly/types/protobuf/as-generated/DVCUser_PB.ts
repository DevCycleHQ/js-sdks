// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class DVCUser_PB {
  static encode(message: DVCUser_PB, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.userId);

    writer.uint32(18);
    writer.string(message.email);

    writer.uint32(26);
    writer.string(message.name);

    writer.uint32(34);
    writer.string(message.language);

    writer.uint32(42);
    writer.string(message.country);

    writer.uint32(49);
    writer.double(message.appBuild);

    writer.uint32(58);
    writer.string(message.appVersion);

    writer.uint32(66);
    writer.string(message.deviceModel);

    writer.uint32(74);
    writer.string(message.customData);

    writer.uint32(82);
    writer.string(message.privateCustomData);
  }

  static decode(reader: Reader, length: i32): DVCUser_PB {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DVCUser_PB();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.userId = reader.string();
          break;

        case 2:
          message.email = reader.string();
          break;

        case 3:
          message.name = reader.string();
          break;

        case 4:
          message.language = reader.string();
          break;

        case 5:
          message.country = reader.string();
          break;

        case 6:
          message.appBuild = reader.double();
          break;

        case 7:
          message.appVersion = reader.string();
          break;

        case 8:
          message.deviceModel = reader.string();
          break;

        case 9:
          message.customData = reader.string();
          break;

        case 10:
          message.privateCustomData = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  userId: string;
  email: string;
  name: string;
  language: string;
  country: string;
  appBuild: f64;
  appVersion: string;
  deviceModel: string;
  customData: string;
  privateCustomData: string;

  constructor(
    userId: string = "",
    email: string = "",
    name: string = "",
    language: string = "",
    country: string = "",
    appBuild: f64 = 0.0,
    appVersion: string = "",
    deviceModel: string = "",
    customData: string = "",
    privateCustomData: string = ""
  ) {
    this.userId = userId;
    this.email = email;
    this.name = name;
    this.language = language;
    this.country = country;
    this.appBuild = appBuild;
    this.appVersion = appVersion;
    this.deviceModel = deviceModel;
    this.customData = customData;
    this.privateCustomData = privateCustomData;
  }
}

export function encodeDVCUser_PB(message: DVCUser_PB): Uint8Array {
  return Protobuf.encode(message, DVCUser_PB.encode);
}

export function decodeDVCUser_PB(buffer: Uint8Array): DVCUser_PB {
  return Protobuf.decode<DVCUser_PB>(buffer, DVCUser_PB.decode);
}
