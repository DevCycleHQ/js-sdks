// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NullableString } from "./NullableString";
import { NullableDouble } from "./NullableDouble";
import { NullableCustomData } from "./NullableCustomData";

export class DVCUser_PB {
  static encode(message: DVCUser_PB, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.userId);

    const email = message.email;
    if (email !== null) {
      writer.uint32(18);
      writer.fork();
      NullableString.encode(email, writer);
      writer.ldelim();
    }

    const name = message.name;
    if (name !== null) {
      writer.uint32(26);
      writer.fork();
      NullableString.encode(name, writer);
      writer.ldelim();
    }

    const language = message.language;
    if (language !== null) {
      writer.uint32(34);
      writer.fork();
      NullableString.encode(language, writer);
      writer.ldelim();
    }

    const country = message.country;
    if (country !== null) {
      writer.uint32(42);
      writer.fork();
      NullableString.encode(country, writer);
      writer.ldelim();
    }

    const appBuild = message.appBuild;
    if (appBuild !== null) {
      writer.uint32(50);
      writer.fork();
      NullableDouble.encode(appBuild, writer);
      writer.ldelim();
    }

    const appVersion = message.appVersion;
    if (appVersion !== null) {
      writer.uint32(58);
      writer.fork();
      NullableString.encode(appVersion, writer);
      writer.ldelim();
    }

    const deviceModel = message.deviceModel;
    if (deviceModel !== null) {
      writer.uint32(66);
      writer.fork();
      NullableString.encode(deviceModel, writer);
      writer.ldelim();
    }

    const customData = message.customData;
    if (customData !== null) {
      writer.uint32(74);
      writer.fork();
      NullableCustomData.encode(customData, writer);
      writer.ldelim();
    }

    const privateCustomData = message.privateCustomData;
    if (privateCustomData !== null) {
      writer.uint32(82);
      writer.fork();
      NullableCustomData.encode(privateCustomData, writer);
      writer.ldelim();
    }
  }

  readField(index: i32): Reader {
      this.reader.reset(this.buffer)
      const end: usize = this.length < 0 ? this.reader.end : this.reader.ptr + this.length;
      while (this.reader.ptr < end) {
          const tag = this.reader.uint32();
          if (tag >>> 3 === index) {
              return this.reader
          } else {
              this.reader.skipType(tag & 7);
          }
      }
      throw new Error(`DVCUser_PB field ${index} not found`);
  }

  // Updated the Protobuf.decode library method to pass buffer to this decude method
  static decode(reader: Reader, length: i32, buffer?: Uint8Array): DVCUser_PB {
    if (!buffer) throw new Error("DVCUser_PB.decode: buffer is null")
    return new DVCUser_PB(reader, length, buffer);
  }

  private reader: Reader;

  private length: i32;

  private buffer: Uint8Array;

  // userId: string;
  // email: NullableString | null;
  // name: NullableString | null;
  // language: NullableString | null;
  // country: NullableString | null;
  // appBuild: NullableDouble | null;
  // appVersion: NullableString | null;
  // deviceModel: NullableString | null;
  // customData: NullableCustomData | null;
  // privateCustomData: NullableCustomData | null;

  constructor(
      reader: Reader,
      length: i32,
      buffer: Uint8Array
  ) {
      this.reader = reader
      this.length = length
      this.buffer = buffer
  }

  private _userId: string | null = null
  private _gotUserId: boolean = false
  get userId(): string {
      if (this._gotUserId) {
          return this._userId!
      }
      this.readField(1)
      this._userId = this.reader.string()
      this._gotUserId = true
      return this._userId
  }

  private _email: NullableString | null = null
    private _gotEmail: boolean = false
    get email(): NullableString | null {
        if (this._gotEmail) {
          return this._email
        }
        this.readField(2)
        this._email = NullableString.decode(this.reader, this.reader.uint32())
        this._gotEmail = true
        return this._email
    }
}

export function encodeDVCUser_PB(message: DVCUser_PB): Uint8Array {
  return Protobuf.encode(message, DVCUser_PB.encode);
}

export function decodeDVCUser_PB(buffer: Uint8Array): DVCUser_PB {
  return Protobuf.decode<DVCUser_PB>(buffer, DVCUser_PB.decode);
}
