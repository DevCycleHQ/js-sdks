// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CustomDataValue } from "./CustomDataValue";

export class NullableCustomData {
  static encode(message: NullableCustomData, writer: Writer): void {
    const value = message.value;
    if (value !== null) {
      const valueKeys = value.keys();
      for (let i: i32 = 0; i < valueKeys.length; ++i) {
        const valueKey = valueKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(valueKey);
        writer.uint32(18);
        writer.fork();
        CustomDataValue.encode(value.get(valueKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }

    writer.uint32(16);
    writer.bool(message.isNull);
  }

  static decode(reader: Reader, length: i32): NullableCustomData {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new NullableCustomData();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let valueKey: string = "";
          let valueValue: CustomDataValue | null = null;
          let valueHasKey: bool = false;
          let valueHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                valueKey = reader.string();
                valueHasKey = true;
                break;

              case 2:
                valueValue = CustomDataValue.decode(reader, reader.uint32());
                valueHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.value === null) {
              message.value = new Map<string, CustomDataValue>();
            }
            const value = message.value;
            if (
              value !== null &&
              valueHasKey &&
              valueHasValue &&
              valueValue !== null
            ) {
              value.set(valueKey, valueValue);
            }
          }
          break;

        case 2:
          message.isNull = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  value: Map<string, CustomDataValue>;
  isNull: bool;

  constructor(
    value: Map<string, CustomDataValue> = new Map(),
    isNull: bool = false
  ) {
    this.value = value;
    this.isNull = isNull;
  }
}

export function encodeNullableCustomData(
  message: NullableCustomData
): Uint8Array {
  return Protobuf.encode(message, NullableCustomData.encode);
}

export function decodeNullableCustomData(
  buffer: Uint8Array
): NullableCustomData {
  return Protobuf.decode<NullableCustomData>(buffer, NullableCustomData.decode);
}
